// Description : Given a string, we have to check weather s2 subsequences of s1. 
// A String is a subsequence of a given String, that is generated by deleting some character of 
// a given string without changing its order.
#include<iostream>
#include<string>
using namespace std;
//Naive approach :- Time :O(2ⁿ + n)  --> n = s1.lenght()

//Efficient Approcach : 
//Time complexity : O(n+m)  --> n = s1.lenght() ,m = s2.lenght()
bool isSubsequence(string &s1,string &s2,int n,int m){
    int j = 0;
    for(int i=0;i<n && j<m ;i++){
        if(s1[i] == s2[j])
            j++;
    }
    return (j == m);
}
//Timecomplexity : O(n+m) Auxiliary space :O(n+m) function_call stack
bool isSubseqRec(string &s1,string &s2,int n,int m){
    //Base case : 
    if(m == 0)
        return true;
    if(n == 0 && m != 0)
        return false;

    //condition to terminating condition    
    if(s1[n-1] == s2[m-1])
        return isSubseqRec(s1,s2,n-1,m-1);
    else 
        return isSubseqRec(s1,s2,n-1,m);
}
int main(){
    string s1 = "abcd";
    string s2 = "ad";
    int n = s1.length();
    int m = s2.length();
    cout<<(isSubsequence(s1,s2,n,m)? "True" : "False")<<endl;
    cout<<(isSubseqRec(s1,s2,n,m)? "True" : "False")<<endl;
    return 0;
}