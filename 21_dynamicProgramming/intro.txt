**
Steps to solve a DP
1) Identify if it is a DP problem
2) Decide a state expression with 
   least parameters
3) Formulate state relationship    
4) Do tabulation (or add memoization)
**
*Step 1 : How to classify a problem as a Dynamic Programming Problem?
:-Typically, all the problems that require to maximize or minimize 
certain quantity or counting problems that say to count the 
arrangements under certain condition or certain probability 
problems can be solved by using Dynamic Programming.
:-All dynamic programming problems satisfy the overlapping 
subproblems property and most of the classic dynamic problems 
also satisfy the optimal substructure property. Once, we observe 
these properties in a given problem, be sure that it can be 
solved using DP.

*Step 2 : Deciding the state DP problems are all about state and 
their transition. This is the most basic step which must be done
very carefully because the state transition depends on the choice
of state definition you make. So, let's see what do we mean by 
the term "state". State A state can be defined as the set of 
parameters that can uniquely identify a certain position or 
standing in the given problem. This set of parameters should be 
as small as possible to reduce state space. For example: In our 
famous Knapsack problem, we define our state by two parameters 
index and weight i.e DP[index][weight]. Here DP[index][weight] 
tells us the maximum profit it can make by taking items from 
range 0 to index having the capacity of sack to be weight. 
Therefore, here the parameters index and weight together can 
uniquely identify a subproblem for the knapsack problem. So, our 
first step will be deciding a state for the problem after identifying 
that the problem is a DP problem. As we know DP is all about 
using calculated results to formulate the final result. So, our 
next step will be to find a relation between previous states to 
reach the current state.


Problem's ::
1.Fibonacci Series
2.Longest Comman Subsequence 
3.Coin Change 
4.Edit Distance 
